CONFIGURACIÓN CENTRALIZADA CON SPRING CLOUD CONFIG

Consumir los application de otro repositorio ---------------------------

Esto supuestamente provee mucha seguridad porque si nos roban el código del proyecto, se roban el 
código pero no datos sensibles, los cuales están en otro repositorio remoto.
Lo que sucede exactamente es que se tienen los application de todos los perfiles en otro repositorio
y el application default se tiene en el repositorio donde esta el código del proyecto.
Ese otro repositorio tiene todos los application-periles de cada proyecto. **

°°°°°°° Configuración en el pom.xml °°°°°°°


<spring-cloud.version>x.x.x</spring-cloud.version> -> Crea una propiedad en la que se define la versión
	de spring cloud a utilizar en el bom.
	Se agrega en la etiqueta properties (donde se define la versión de kotlin, java, etc.). **
	Buscar en internet cual versión debería de ir. ****
	La versión 2025.0.0, agarro correctamente con la versión de spring boot: 3.5.3.

<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>${spring-cloud.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement> -> Importa un BOM (Bill of Materials) de Spring Cloud. Define qué versiones usar 	para todas las librerías de un conjunto (en este caso, Spring Cloud).
	Existen muchas dependencias relacionadas a spring cloud, si pusiéramos las versiones de cada
	dependencia manualmente, se podrían mezclar versiones incompatibles. El BOM asegura que todas las
	versiones se alineen. ***
	Se agrega arriba del arreglo de dependencias.

Agregar dos dependencias al pom:

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-config</artifactId>
</dependency> -> Sirve para conectarte a un Config Server centralizado.
	Permite que tu aplicación no tenga sus application.yml/properties locales con passwords, 
	endpoints, etc., sino que los lea de un Spring Cloud Config Server.

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency> -> Sirve para registrar tu aplicación en un Eureka Server (Service Discovery).


°°°°°°° Configuración en los application's °°°°°°°

Esta configuración va en el application default del proyecto.

spring.config.import=valor
	- valores:
		- configserver:url -> para importar configuraciones externas desde un servidor de 
			configuración centralizado. 
			Es como importar otro application.yaml o application.properties, pero desde un 
			servidor remoto.
			Las configuraciones remotas sobrescriben las locales. ****
			La aplicación FALLARÁ al iniciar si el Config Server no está disponible. ***
		- file:./local-overrides.yaml -> para importar un archivo de configuración local 
			adicional que sobrescribe o complementa las configuraciones principales. 
			Es de buena practica crear un .gitignore que ignore este archivo.
	Si se tuviera un remoto y un local, el último archivo importado sobrescribe a los anteriores. ****
	Ventajas: Seguridad centralizada para datos sensibles.	
	- Optional: La aplicación puede iniciar aunque el Config Server no esté disponible o no se 
		encuentre el archivo local.
		Se coloca entre el = y la palabra configserver o file, según sea el caso.

Configuración dentro de cada application-perfil y application-personalizado que esta dentro del respositorio
remoto:

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:ip_eureka/eureka}
  instance:
    preferIpAddress: true