


//////////////////////////////////////////MONGODB////////////////////////////////////////////

from pymongo import MongoClient
from pymongo.errors import ConnectionFailure

MONGO_URI = "mongodb://localhost:27017/"
client = MongoClient(MONGO_URI) -> Realiza la conexión con mongoDb.
	Lanza la exception 'ConnectionFailure' cuando no se puede establecer conexión con 
	el servidor
	- serverSelectionTimeoutMS=n_milisegundos -> Si MongoDB no responde en este tiempo, 
		se lanza el error 'ServerSelectionTimeoutError'. Esta exception hereda de
		ConnectionFailure

DB_NAME = "nombre_db"
db = client[DB_NAME] -> Acceder a determinada base de datos.


Métodos para una data base --------------------------------

db.list_collection_names() -> Lista los nombres de todas las colecciones en la base de datos

db.create_collection("name_colection") -> Crea una nueva colección con el nombre dado.

db.drop_collection("name_colection") -> Elimina una colección.

nombreObjetoCollection = db.collection_name ó
nombreObjetoCollection = db['collection_name'] -> Obtiene una colección específica.


Métodos para una collection --------------------------------

nombreObjetoCollection.insert_one({"nombreCampo1": "valor1", "nombreCampo2": "valor2", 
	"nombreCampoN": "valorN"}) -> Inserta un documento.

results = todos.insert_many(listaDiccionarios) -> Para insertar multiples registros.
	Devuelve una lista con los _id generados para cada documento.




////////////////////////////////////////////ENVIAR PETICIONES////////////////////////////////////////////


PETICIONES 

import requests → librería para hacer peticiones HTTP (GET, POST, PUT, DELETE, etc.).

response = requests.nombre_metodo_http(url) -> Realiza cierta petición http a cierta url.
	Lanzara la exception: 'exceptions.ConnectionError' si no se pudo conectar al servidor o lanzara la
	exception: 'exceptions.Timeout' si el servidor tarda demasiado en responder.
	Esta instrucción también debe indicarse que atrapara a la exception: 'exceptions.RequestException' 
	para cualquier otro error inesperado.
	- timeout=n -> Si el servidor no responde en 3 segundos, se lanza una excepción 				'requests.exceptions.Timeout'
		Si no defines timeout, No hay límite de espera. Eso significa que el programa puede quedarse 		colgado indefinidamente.
	- headers = {
              "nombre-encabezado1": "valor1",
              "nombre-encabezado2": "valor2",
              "nombre-encabezadoN": "valorN",
          }
	  headers=headers -> Para mandar encabezados en la petición.
	- params = {
              "nombreParametro1": "valor1",
              "nombreParametro2": "valor2",
              "nombreParametroN": "valorN",
          }
	  params=params -> Para mandar parámetros en la petición.
		sirve exclusivamente para query-params y no para path variables. **
		Para path variables seria con f-strings o con format. ***

response.raise_for_status() -> Lanza la exception: 'exceptions.HTTPError' si el servidor responde con un 
	código HTTP de error (4xx o 5xx).

response.status_code -> Ver código HTTP.

data = response.json() -> Convertire de json a diccionario el cuerpo de la respuesta de la petición.

data = response.text -> Convertire de json a texto el cuerpo de la respuesta de la petición.

