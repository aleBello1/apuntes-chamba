El proceso para la integración de un nuevo pipeline debe ser exclusiva por los administradores de 
Jenkins para evitar modificaciones no autorizadas dentro de la plataforma.


INTERFAZ GRAFICA DE USUARIO

Crear un nuevo pipeline -------------------------------------

crear una nueva carpeta donde se especifique a qué area va dirigido el nuevo pipeline: (las áreas serian:
	backend, frontend, etc). en apartado izq -> nueva tarea -> asignar nombre -> elegir folder -> 
	asginar diplay name y description -> apply

Crea un pipeline: Ingresar a determinada carpeta -> apartado izq -> new item -> asignar nombre (el nombre
	del proyecto) -> multibranch (porque queremos el despliegue en dev y prod) -> ok.
	Asignar nombre (igualmente el nombre del proyecto) -> indicar donde vive el repositorio (si
	git hub, bitBucket, etc).
		Bitbucket:
		- Se debe crear un server para bitbucket.
		- Después de crearlo, en este selector se deberá elegir el ultimo. ***
	seleccionar las credenciales -> asginar el owner (el nombre de usuario del repo) -> asignar el 
	nombre del repositorio. En un apartado mas abajo buscar: 'Build Configuration' -> mode: by 
	JenkisFile -> apply and save.

Crear un servser para bitbucket: en la parte sup der -> click engrane -> system configuration -> system
	-> irse hasta el apartado bitbucket endpoints -> click en añadir -> bitbucket cloud (no se le 
	configurara nada) -> apply -> save.
	Esta configuración debería ser suficiente pero si no lo es, entonces hacer la siguiente 
	configuración. Sabemos que esta configuración no fue suficiente si al regresar al paso de: 'crear
	un pipeline' al momento de intentar seleccionar un server, no aparece uno nuevo. ***
	*Igualmente en system configuration -> system* -> irse hasta el apartado bitbucket endpoints -> 
	click en añadir -> bitbucket cloud -> asginar el nombre del dueño del repositorio (o compañía 
	dueña del repositorio) -> url del dueño del repositorio	(pe: https://bitbucket.org/nombreCompañia)
	-> server versión: data center v8.x (and later), tener palomeado las opciones: call can merge
	y call changes api -> apply -> save.

Crear un webhook para un repositorio en bitbucket: Ir a determinado repositorio -> apartado izq reposiroty
	settings -> webhooks -> add webhook -> en title: nombre del repositorio, url: conformado por
	[url donde vive la instania de jenkins][evento a ejecutar] -> Status: active -> El el apartdo de 
	triggers, en la columna de repository: palomear push, en la columna issue se queda vacio, en la 	columna de pull request palomear create, update, comment created, comment updated -> save.

Crear credenciales en jenkins: Nos dirigimos a Jenkins -> parte sup der 'engrane' -> apartado security -> 	credentials -> En el apartado domain -> dar click sobre cualquier lugar donde diga 'global' ->
	add credentials.
	En kind: secret text; scope dejamos el valor por default 'Glocal (Jnekins, nodes, items, all chid,
	etc)'; en secret: se le asigna la ip a donde ira el .jar, por ejemplo la ip del ec2 donde se 
	despliega prod; en id es una especie de nombre de variable que se crea y se usa en nuestro 
	jenkinsfile, esta conformado por un nombre asi: 
	ssh-[nombreNube]-[nombreServicio]-instance-[nombreProyecto]-[nombreAmbiente]-ip, por ejemplo: 
	ssh-aws-ec2-instance-ws-clupp-dev-ip.

Agregar credencial de tipo PEM: Nos dirigimos a Jenkins -> parte sup der 'engrane' -> apartado security -> 	credentials -> En el apartado domain -> dar click sobre cualquier lugar donde diga 'global' ->
	add credentials.
	En kind: SSH Username with private key; en id es una especie de nombre de variable que se crea y se 	usa en nuestro jenkinsfile, esta conformado por un nombre asi: 
	ssh-[nombreNube]-[nombreServicio]-[nombreProyecto]-pem por ejemplo: ssh-aws-arm-ws-clupp-pem; en 
	username se agrega el nombre de la instancia por ejemplo Ubuntu; palomeamos la opción: Enter 	directly e ingresamos la pem.
	El pem proviene de la instancia de aws. ***

Agregar y configurar el JenkinsFile a nuestro proyecto: Ir a determinado repositorio -> crearemos una nueva
	rama llamada feature/jenkinsfile -> clonamos el repositorio remoto y nos posicionamos en la rama 	recién creada -> si tiene el archivo bitbucket-pipeline.yml en la raíz del proyecto, lo 	eliminamos -> En la raíz del proyecto cremos el archivo 'Jenkinsfile' (la primera letra en 
	mayuscula, las demans en minúsculas y no tiene extensión el archivo).
	Hay aprox 5 variables que se les debe cambiar el valor: 	
	- BITBUCKET_REPO: Repositorio a donde está alojado el proyecto.
	- BITBUCKET_CREDENTIALS_ID: Credencial principal del administrador.
	- credentialsId A1: Nombre de la credencial en Jenkins que apunta a Desarrollo. 
		En pocas palabras es para poder subir el .jar a cierta instancia de aws en dev.
	- credentialsId A2: Nombre de la credencial en Jenkins que apunta a producción.
		En pocas palabras es para poder subir el .jar a cierta instancia de aws en prod.
	- credentialsId A3: Nombre de la credencial en Jenkins que apunta al pem.
	
Observar el estatus de un despliegue automatico en bitbucket: Ingresar a determinado repositorio -> apartado 	izq 'commits' -> Ir a la rama desde donde se hizo el push (pe develop o master) -> dirigirse al 	commit desde donde se hizo el push (lo común será que sea el utlimo commit) -> apartado izq 'builds'
	-> click sobre el enlace de Jenkins que aparezca.


















